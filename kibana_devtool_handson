GET _search
{
  "query": {
    "match_all": {}
  }
}
GET _cat/shards
GET _cat/nodes?v
GET _cluster/health?pretty
GET _cat/indices
PUT logstash-2021.07.05-000001
{
  "settings":{
    "number_of_shards":1,
    "number_of_replicas":0
  }
    
}
DELETE /products
POST /products/_doc
{
  "name":"phone",
  "price":64,
  "in_stock":100
}

PUT /products/_doc/100
{
  "name":"phone",
  "price":64,
  "in_stock":100
}
GET /products/_doc/100

POST /products/_update/100
{
  "doc":{
    "in_stock":103
  }
}
POST /products/_update/100
{
  "doc":{
    "tags":["electronics"]
  }
}


POST /products/_update/100
{
  "script": {
    "source": "ctx._source.in_stock--"
  }
}

POST /products/_update/100
{
  "script":{
    "source":"ctx._source.name = 'smartphone'"
  }
}
GET /products/_doc/100

POST /products/_update/100
{
  "script": {
    "source": "ctx._source.in_stock -= params.quantity",
    "params": {
      "quantity":4
    }
  }
}

POST /products/_update/100
{
  "script":{
    "source":"""
    if(ctx._source.in_stock==0){
      ctx.op='noop';
    }
    ctx._source.in_stock--;
    """
  }
}


PUT /_template/access-logs
{
  "index_patterns": ["access-logs*"],
  "settings": {
    "index.mapping.coerce": false
  }, 
  "mappings": {
    "dynamic": false,
    "properties": {
      "@timestamp": { "type": "date" },
      "message": { "type": "text" },
      "event.dataset": { "type": "keyword" },
      "hour_of_day": { "type": "short" },
      "http.request.method": { "type": "keyword" },
      "http.request.referrer": { "type": "keyword" },
      "http.response.body.bytes": { "type": "long" },
      "http.response.status_code": { "type": "long" },
      "http.version": { "type": "keyword" },
      "url.fragment": { "type": "keyword" },
      "url.path": { "type": "keyword" },
      "url.query": { "type": "keyword" },
      "url.scheme": { "type": "keyword" },
      "url.username": { "type": "keyword" },
      "url.original": {
        "type": "keyword",
        "fields": {
          "text": {
            "type": "text",
            "norms": false
          }
        }
      },
      "client.address": { "type": "keyword" },
      "client.ip": { "type": "ip" },
      "client.geo.city_name": { "type": "keyword" },
      "client.geo.continent_name": { "type": "keyword" },
      "client.geo.country_iso_code": { "type": "keyword" },
      "client.geo.country_name": { "type": "keyword" },
      "client.geo.location": { "type": "geo_point" },
      "client.geo.region_iso_code": { "type": "keyword" },
      "client.geo.region_name": { "type": "keyword" },
      "user_agent.device.name": { "type": "keyword" },
      "user_agent.name": { "type": "keyword" },
      "user_agent.version": { "type": "keyword" },
      "user_agent.original": {
        "type": "keyword",
        "fields": {
          "text": {
            "type": "text",
            "norms": false
          }
        }
      },
      "user_agent.os.version": { "type": "keyword" },
      "user_agent.os.name": {
        "type": "keyword",
        "fields": {
          "text": {
            "type": "text",
            "norms": false
          }
        }
      },
      "user_agent.os.full": {
        "type": "keyword",
        "fields": {
          "text": {
            "type": "text",
            "norms": false
          }
        }
      }
    }
  }
}




PUT /_template/orders
{
  "index_patterns": ["orders*"],
  "settings": {
    "index.mapping.coerce": false
  }, 
  "mappings": {
    "dynamic": false,
    "properties": {
      "@timestamp": { "type": "date" },
      "id": { "type": "keyword" },
      "product": {
        "properties": {
          "id": { "type": "keyword" },
          "name": { "type": "keyword" },
          "price": { "type": "float" },
          "brand": { "type": "keyword" },
          "category": { "type": "keyword" }
        }
      },
      "customer.id": { "type": "keyword" },
      "customer.age": { "type": "short" },
      "customer.gender": { "type": "keyword" },
      "customer.name": { "type": "keyword" },
      "customer.email": { "type": "keyword" },
      "channel": { "type": "keyword" },
      "store": { "type": "keyword" },
      "salesman.id": { "type": "keyword" },
      "salesman.name": { "type": "keyword" },
      "discount": { "type": "float" },
      "total": { "type": "float" }
    }
  }
}

cd test-data

curl -H "Content-Type: application/x-ndjson" -XPOST http://localhost:9200/_bulk --data-binary "@orders.bulk.ndjson"
curl -H "Content-Type: application/x-ndjson" -XPOST http://localhost:9200/_bulk --data-binary "@nginx-access-logs-2020-01.bulk.ndjson"
curl -H "Content-Type: application/x-ndjson" -XPOST http://localhost:9200/_bulk --data-binary "@nginx-access-logs-2020-02.bulk.ndjson"
curl -H "Content-Type: application/x-ndjson" -XPOST http://localhost:9200/_bulk --data-binary "@nginx-access-logs-2020-03.bulk.ndjson"


































#example of standard analyzer
PUT index_standard_analyzer
{
  "settings": {
    "analysis": {
      "analyzer": {
        "std": { 
          "type": "standard"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "my_text": {
        "type": "text",
        "analyzer": "std"
      }
    }
  }
}

POST index_standard_analyzer/_analyze
{
  "field": "my_text", 
  "text": "The Standard Analyzer works this way. I love the standard analyzer for its tokenizing capacity"
}

PUT index_standard_analyzer_english_stopwords
{
  "settings": {
    "analysis": {
      "analyzer": {
        "std": { 
          "type": "standard",
          "stopwords": "_english_"
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "my_text": {
        "type": "text",
        "analyzer": "std"
      }
    }
  }
}
POST index_standard_analyzer_english_stopwords/_analyze
{
  "field": "my_text", 
  "text": "The Standard Analyzer works this way."
}

GET /_analyze
{
  "text": "Learning Elastic Stack 7",
  "analyzer": "standard"
}


PUT /custom_analyzer_index
{
  "settings": {
    "index": {
      "analysis": {
        "analyzer": {
          "custom_analyzer": {
            "type": "custom",
            "tokenizer": "standard",
            "filter": [
              "lowercase",
              "custom_edge_ngram"
            ]
          }
        },
        "filter": {
          "custom_edge_ngram": {
            "type": "edge_ngram",
            "min_gram": 2,
            "max_gram": 10
          }
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "product": {
        "type": "text",
        "analyzer": "custom_analyzer",
        "search_analyzer": "standard"
      }
    }
  }
}


POST /custom_analyzer_index/_doc
{
  "product": "Learning Elastic Stack 7"
}

POST /custom_analyzer_index/_doc
{
 "product": "Mastering Elasticsearch"
}
# auto complete feature 
GET /custom_analyzer_index/_search
{
 "query": {
   "match": {
     "product": "Ela"
   }
 }
}

GET /_cat/indices
GET /learn/_search
GET /learn/_mapping
GET /learn/_settings
GET /learn/_doc/_search

GET /learn/_search
{
   "_source": ["title"],
   "size": 20,
   "min_score": 0.5,
   "query": {
      "bool": {
         "must": [],
         "filter": [],
         "should": [
          {
           "match": {
             "title": "dick"
             
           }
          },
          {
           "match": {
             "title": "midnight"  
           }
          }
         ],
         "must_not": [{
           "bool":{
             "should":[
              {
                "match":{
                  "title":"run"
                }
              },
              {
                "match":{
                  "title":"diner"
                }
              }
              ]
           }
        }]
      }
   }
}

parent child relation

DELETE series
PUT series/
{
"mappings": {
 "properties": {
 "title":{"type": "keyword"}, 
 "film_to_franchise":{"type": "join","relations":{"franchise":"film"}
      }
    }
  }
}
DELETE series
GET series/_search
{
  "query": {
    "has_parent": {
      "parent_type": "franchise",
      "query": {
        "match": {
          "title": "Star Wars"
        }
      }
    }
  }
    
}

GET series/_search
{
  "query": {
    "has_child": {
      "type": "film",
      "query": {
        "match": {
          "title": "Star Wars: Episode IV - A New Hope"
        }
      }
    }
  }
}

GET movies/_search
{
  "query": {
    "match_all": {}
  }
}
POST movies/_update/135569
{
  "doc": {
    "year":2014
  }
}
POST movies/_doc/2020
{
  "doc":{
  "titel":"hello"
  }
}
GET movies/_doc/2020
DELETE movies/_doc/2020?pretty
GET movies/_search?q=love
PUT movies/_doc/20201
{
  "title":"krishna loves soni",
  "genre":["romantic", "love"],
  "year":2016
}
GET movies/_doc/20201
POST movies/_update/20201?retry_on_conflict=5
{
  "doc": {
    "home":"G05 lily block vijayasri elixir "
  }
}

DELETE krithahome/
PUT krithahome/
{
  "mappings":{
    "properties":{
      "name":{"type":"keyword"},
      "staying":{"type":"text"},
      "phone":{"type":"integer"},
      "nature":{"type":"text","analyzer": "english"}
    }
  }
}
DELETE movies

PUT movies/
{
  "mappings": {
    "properties": {
      "id":{"type": "integer"},
      "year":{"type":"date"},
      "genre":{"type":"keyword"},
      "title":{"type":"text","analyzer": "english"}
      
    }
  }
}
GET movies/_mapping
GET movies/_search

GET movies/_search?q=past
DELETE series
PUT series/
{
"mappings": {
 "properties": {
 "title":{"type": "keyword"}, 
 "film_to_franchise":{"type": "join","relations":{"franchise":"film"}
      }
    }
  }
}
DELETE series
GET series/_search
{
  "query": {
    "has_parent": {
      "parent_type": "franchise",
      "query": {
        "match": {
          "title": "Star Wars"
        }
      }
    }
  }
    
}

GET series/_search
{
  "query": {
    "has_child": {
      "type": "film",
      "query": {
        "match": {
          "title": "Star Wars: Episode IV - A New Hope"
        }
      }
    }
  }
}

#flattened mapping field, no analyzers or tokenizers are applied to this fields they are treated as a keyword match, main purpose is to reduce inner field mappings and there by preventing mapping explosion no highlighting feature(as no analysis)
GET _cluster/state

PUT demo-flatened
GET demo-flatened/_mapping
DELETE demo-flatened
PUT demo-flatened
{
  "mappings": {
    "properties": {
      "host":{"type": "flattened"}
    }
  }
}
GET demo-flatened/_mapping

POST demo-flatened/_doc
{
  "doc":{
    
    "message": "[5592:1:0309/123054.737712:ERROR:child_process_sandbox_support_impl_linux.cc(79)] FontService unique font name matching request did not receive a response.",
    "fileset": {
      "name": "syslog"
    },
    "process": {
      "name": "org.gnome.Shell.desktop",
      "pid": 3383
    },
    "@timestamp": "2020-03-09T18:00:54.000+05:30",
    "host": {
      "hostname": "bionic",
      "name": "bionic"
    }
  }
  
}
GET demo-flatened/_search
GET demo-flatened/_mapping

POST demo-flatened/_update/d0M3anwBv-Pt7pDf_vGN
{
  "doc": {
    "host":{
      "osVersion":"Bionic Server",
      "osArchitecture":"x86_64"
    }
    
  }
}

GET demo-flatened/_doc/d0M3anwBv-Pt7pDf_vGN
GET demo-flatened/_mapping

GET demo-flatened/_search
{
  "query": {
    "match": {
      "host": "Bionic Server"
    }
  }
}

GET demo-flatened/_search
{
  "query": {
    "match": {
      "host.osVersion": "Bionic Server"
    }
  }
}
GET demo-flatened/_search
{
  "query": {
    "match": {
      "doc.host.name": "Bionic"
    }
  }
}
GET demo-flatened/_search
{
  "query": {
    "match": {
      "doc.host.osVersion": "Server"
    }
  }
}

POST microservice-logs/_doc
{"doc":
{"timestamp": "2020-04-11T12:34:56.789Z", "service": "ABC", "host_ip": "10.0.2.15", "port": 12345, "message": "Started!" }
}
GET microservice-logs/_search

GET microservice-logs/_mapping

POST microservice-logs/_doc
{"doc":
{"timestamp": "2020-04-11T12:34:56.789Z", "service": "WiC", "host_ip": "10.3.2.15", "port": "6345", "message": "Started!" }
}


GET microservice-logs/_search


GET /microservice-logs/_close

GET /microservice-logs/_settings
### --data-raw '{
###    "index.mapping.ignore_malformed": true
### }'

GET /microservice-logs/_open

### 6.
GET /microservice-logs/_doc?pretty
### --data-raw '{"timestamp": "2020-04-11T12:34:56.789Z", "service": "XYZ", "host_ip": "10.0.2.15", "port": "NONE", "message": "I am not well!" }'

#mapping.ignored_malformed cant handle json object if the type field is difined as text
#so Payload field is used to handle JSON objects.

GET /microservice-logs/_doc?pretty
### --data-raw '{"timestamp": "2020-04-11T12:34:56.789Z", "service": "ABC", "host_ip": "10.0.2.15", "port": 12345, "message": "Received...", "payload": {"data": {"received":"here"}}}'
#here is anothe trap, ie if the payoad.data.received field nested or larger JSON data, we will face the mapping issue ie

GET /microservice-logs/_doc?pretty
### --data-raw '{"timestamp": "2020-04-11T12:34:56.789Z", "service": "ABC", "host_ip": "10.0.2.15", "port": 12345, "message": "Received...", "payload": {"data": {"received": {"even": "more"}}}}'
#we may face maper exception
#we have to be aware of this mapping fields and also establish shared guidelines  or 
#may even consider dead letter queue pattern, ie dlq, which will store the failed documents in a seperate queue, which may be handled at application level or may be handled at logstash dlq which still allows us to process the documents

#another caution is about mapping limit. by default the mapping limit is 1000, we may encounter illegal argument exception 
#increasing the mapping limit

curl XPUT 'http://localhost:9200/indexname/_settings -d '
{
  "index.mapping.total_fields.limit":1001
}'


PUT microservice-logs/_settings
{
  "index.mapping.total_fields.limit":1001
}
GET movies/_search
{
"query": {
  "bool": {
    "must": [
      {"match": {
        "title": "star"
      }
      }
    ],
    "filter": [
      {"range": {
        "year": {
          "gte": 2016
        }
      }}
    ]
  }
}
}

GET movies/_search?q=title:star
GET movies/_search?q=+year:>2010+title:star

GET movies/_search
{
  "query": {
    "match": {
      "title": "star"
    }
  }
}

GET movies/_search
{
"query": {
  "bool": {
    "must": 
      {
        "term": {"title": "star"}
      },
    "filter": 
      {
        "range": {"year": {"gte": 2016}}
        
      }
    
    }
  }
}
GET movies/_mapping

GET movies/_search
{
  "query": {
    "match_phrase": {
      "title": {
        "query": "star beyond","slop": 1
      }
    }
  }
}

GET movies/_search
{
  "query": {
    "match_phrase": {
      "title": {
        "query": "star beyond","slop": 100
      }
    }
  }
}
GET movies/_search?q=%2Btitle%3Astar%20wars+%2Byear%3A%3E1980

GET movies/_search
{
  "query": {
    "bool": {
      "must": 
        {
          "match_phrase": {
          "title": "star wars"
          }
          
        },
        "filter": 
        {
          "range": {
            "year": {
              "gte": 1980
            }
          }
        }
        
          
        }
      
    }
}


GET movies/_search?q=title:star
GET movies/_search?q=+year:>2010+title:star

GET movies/_search
{
  "query": {
    "match": {
      "title": "star"
    }
  }
}

GET movies/_search
{
"query": {
  "bool": {
    "must": 
      {
        "term": {"title": "star"}
      },
    "filter": 
      {
        "range": {"year": {"gte": 2016}}
        
      }
    
    }
  }
}
GET movies/_mapping

GET movies/_search
{
  "query": {
    "match_phrase": {
      "title": {
        "query": "star beyond","slop": 1
      }
    }
  }
}

GET movies/_search
{
  "query": {
    "match_phrase": {
      "title": {
        "query": "star beyond","slop": 100
      }
    }
  }
}
GET movies/_search?q=%2Btitle%3Astar%20wars+%2Byear%3A%3E1980

GET movies/_search
{
  "query": {
    "bool": {
      "must": 
        {
          "match_phrase": {
          "title": "star wars"
          }
          
        },
        "filter": 
        {
          "range": {
            "year": {
              "gte": 1980
            }
          }
        }
        
          
        }
      
    }
}
#   pagination

GET movies/_search
{
  "from": 2
  , "size": 4
  
}

#Sorting
GET movies/_search
{
  "sort": [
    {
      "year": {
        "order": "asc"
      }
    }
  ]
}
DELETE movies

PUT movies
{
  "mappings": {
    "properties": {
      "title":{
        "type": "text",
        "fields": {
          "raw":{
            "type":"keyword"
          }
        }
      }
    }
  }
}

GET movies/_search?sort=title.raw


#nested search
GET movies/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "genre": "Sci-Fi"
          }
        }
      ],
      "must_not": [
        {
          "match": {
            "title": "trek"
          }
        }
      ],
      "filter": [
        {
          "range": {
            "year": {
              "gte": 2010,
              "lt": 2015
            }
          }
        }
      ]
    }
  }
}
GET movies/_search
GET movies/_mapping
GET movies/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "genre": "sci-fi"
          }
        }
      ],
      "must_not": [
        
      ],
      "filter": [
        {
          "range": {
            "year": {
              "lt": 1960
            }
          }
        }
      ]
    }
  }
  , 
  "sort": [
    {
      "title.raw": {
        "order": "desc"
      }
    }
  ]
}

#    Fuzzy Query, lavenshtein edit distance
#substituation , insertions, deletions
GET movies/_search?q=interstellar
GET movies/_search
{
  "query": {
    "fuzzy": {
      "title": {"value": "intresteller","fuzziness": 2}
  }
}
}
#prefix query
GET movies/_search
{
  "query": {
    "prefix": {
      "title": {
        "value": "star"
      }
    }
  }
}
#prefix query is supported only for text
GET movies/_search
{
  "query": {
    "prefix": {
      "year": {
        "value": "201"
      }
    }
  }
}

#wild card query works on text field
GET movies/_search
{
  "query": {
    "wildcard": {
      "title": {
        "value": "st*"
      }
    }
  }
}

GET movies/_search
{
  "query": {
    "wildcard": {
      "title": "i*"
      
    }
  }
}

# Autocompleteion feature, abusing sloppiness, search as you type

GET movies/_search
{
  "query": {
    "match_phrase_prefix": {
      "title": {"query": "star tr","slop":10}
    }
  }
}

#indextime with N-grams unigrams bigrams trigrams 4 grams
#unigrams ['s','t','a','r']
bigrams ['st','ta','ar']
trigrams ['sta','tar']
4 grams ['star']

DELETE movies
PUT movies
{
  "settings": {
    "analysis": {
      "filter": {
        "autocomplete_filter":{
          "type":"edge_ngram",
          "min_gram":1,
          "max_gram":20
        }
      },
      "analyzer": {
        "autocomplete":{
          "type":"custom",
          "tokenizer":"standard",
          "filter":[
            "lowercase",
            "autocomplete_filter"]
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "title":{
        "type": "text",
        "analyzer": "autocomplete"
       
      }
    }
  }
}

GET movies/_mapping

GET movies/_search
{
  "query": {
    "match": {
      "title": {
        "query": "for",
        "analyzer": "standard"
      }
    }
  }
}



DELETE movies
PUT movies
{
  "settings": {
    "analysis": {
      "filter": {
        "autocomplete_filter":{
          "type":"edge_ngram",
          "min_gram":1,
          "max_gram":20
        }
      },
      "analyzer": {
        "autocomplete":{
          "type":"custom",
          "tokenizer":"standard",
          "filter":[
            "lowercase",
            "autocomplete_filter"
            ]
        }
      }
    }
  }
}

GET movies/_analyze
{
  "analyzer": "autocomplete",
  "text": "krishnareddysonalreddy"
}
PUT movies/_mapping
{
  "properties":{
    "title":{
      "type":"text",
      "analyzer":"autocomplete"
      
    }
  }
}

GET movies/_search
{
  "query": {
    "match": {
      "title": "sta"
    }
  }
}
# with the above mappings , the query is also split into unigrams, bigrams, trigrams,4grams...., hence its matching "plan 9 from Outer Space"  ie [s] is matching space. to avoid this we should use standard analyzer at query side and our custom analyzer at index side. ie


GET movies/_search
{
  "query": {
    "match": {
      "title": {
        "query": "sta",
        "analyzer": "standard"
      }
    }
  }
}
#with the above query we are able to match only [sta] from query  side with [s] [st] [sta] [star]... on the index side.

# but still we have a breaking things here ie 

suppose your search query is 'star tre', but this time it matches
the documents contatiing star and tre  ie
"Star Trek Beyond" and "Star Wars: Episode VII - The Force Awakens", where as it should match only star trek beyond. 
becuase every search term is treated independently
[s] [st] [sta] [star] matching star of both documents , eventhough 'tre' is not in one of the documents.
Hence we need to make use of completion suggester to avoid such unwanted matches, completion suggester will give fine control on what to match



Macbooks-MBP:ml-latest-small macbook$ curl -H 'Content-Type:application/json' --silent --request POST http://localhost:9200/movies/_analyze?pretty -d '
> "tokenizer":"standard",
> "filter":[{"type":"edge_ngram","min_gram":1,"max_gram":4}],
> "text":"star"
> }'
{
  "error" : {
    "root_cause" : [
      {
        "type" : "x_content_parse_exception",
        "reason" : "[2:1] [analyze_request] Expected START_OBJECT but was: VALUE_STRING"
      }
    ],
    "type" : "x_content_parse_exception",
    "reason" : "[2:1] [analyze_request] Expected START_OBJECT but was: VALUE_STRING"
  },
  "status" : 400
}
Macbooks-MBP:ml-latest-small macbook$ curl -H 'Content-Type:application/json' --silent --request POST http://localhost:9200/movies/_analyze?pretty -d '
{"tokenizer":"standard",
"filter":[{"type":"edge_ngram","min_gram":1,"max_gram":4}],
"text":"star"
}'
{
  "tokens" : [
    {
      "token" : "s",
      "start_offset" : 0,
      "end_offset" : 4,
      "type" : "<ALPHANUM>",
      "position" : 0
    },
    {
      "token" : "st",
      "start_offset" : 0,
      "end_offset" : 4,
      "type" : "<ALPHANUM>",
      "position" : 0
    },
    {
      "token" : "sta",
      "start_offset" : 0,
      "end_offset" : 4,
      "type" : "<ALPHANUM>",
      "position" : 0
    },
    {
      "token" : "star",
      "start_offset" : 0,
      "end_offset" : 4,
      "type" : "<ALPHANUM>",
      "position" : 0
    }
  ]
}
Macbooks-MBP:ml-latest-small macbook$ curl -H 'Content-Type:application/json' -XPUT http://localhost:9200/autocomplete -d '
> {
> "mappings":{
> "properties":{
> "title":{
> "type":"search as you type"
> },
> "genre":{
> "type":"search as you type"
> }
> }
> }
> }'
{"error":{"root_cause":[{"type":"mapper_parsing_exception","reason":"No handler for type [search as you type] declared on field [genre]"}],"type":"mapper_parsing_exception","reason":"Failed to parse mapping [_doc]: No handler for type [search as you type] declared on field [genre]","caused_by":{"type":"mapper_parsing_exception","reason":"No handler for type [search as you type] declared on field [genre]"}},"status":400}Macbooks-MBP:ml-latest-small macbook$ 
Macbooks-MBP:ml-latest-small macbook$ 
Macbooks-MBP:ml-latest-small macbook$ 
Macbooks-MBP:ml-latest-small macbook$ curl -H 'Content-Type:application/json' -XPUT http://localhost:9200/autocomplete -d '
{
"mappings":{
"properties":{
"title":{
"type":"search_as_you_type"
},
"genre":{
"type":"search_as_you_type"
}
}
}
}'
{"acknowledged":true,"shards_acknowledged":true,"index":"autocomplete"}Macbooks-POSTml-latest-small macbook$ curl -H 'Content-Type:application/json' -X 
curl: no URL specified!
curl: try 'curl --help' or 'curl --manual' for more information
Macbooks-MBP:ml-latest-small macbook$ 
Macbooks-MBP:ml-latest-small macbook$ 
Macbooks-MBP:ml-latest-small macbook$ 
Macbooks-MBP:ml-latest-small macbook$ 
Macbooks-MBP:ml-latest-small macbook$ curl -H 'Content-Type:application/json' -XPOST http://localhost:9200/_reindex?pretty -d '
> {
> "source":"movies"
> 
> 
Macbooks-MBP:ml-latest-small macbook$ curl -H 'Content-Type:application/json' -XPOST http://localhost:9200/_reindex?pretty -d '
> {
> "source":{
> "index":"movies"
> }
> ,"dest":{
> "index":"autocomplete"
> }
> }'| grep "total\|created\|failures"
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   400  100   331  100    69    420     87 --:--:-- --:--:-- --:--:--   506
  "total" : 5,
  "created" : 5,
  "failures" : [ ]
Macbooks-MBP:ml-latest-small macbook$ curl -XGET http://localhost:9200/autocomplete
{"autocomplete":{"aliases":{},"mappings":{"properties":{"genre":{"type":"search_as_you_type","doc_values":false,"max_shingle_size":3},"id":{"type":"text","fields":{"keyword":{"type":"keyword","ignore_above":256}}},"title":{"type":"search_as_you_type","doc_values":false,"max_shingle_size":3},"year":{"type":"long"}}},"settings":{"index":{"routing":{"allocation":{"include":{"_tier_preference":"data_content"}}},"number_of_shards":"1","provided_name":"autocomplete","creation_date":"1634032327244","number_of_replicas":"1","uuid":"eTjOL5-sSRuaA_-aWuIUKQ","version":{"created":"7150099"}}}}}Macbooks-MBP:ml-latest-small macbook$ 
Macbooks-MBP:ml-latest-small macbook$ 
Macbooks-MBP:ml-latest-small macbook$ 
Macbooks-MBP:ml-latest-small macbook$ curl -XGET http://localhost:9200/autocomplete/_mapping?pretty
{
  "autocomplete" : {
    "mappings" : {
      "properties" : {
        "genre" : {
          "type" : "search_as_you_type",
          "doc_values" : false,
          "max_shingle_size" : 3
        },
        "id" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "title" : {
          "type" : "search_as_you_type",
          "doc_values" : false,
          "max_shingle_size" : 3
        },
        "year" : {
          "type" : "long"
        }
      }
    }
  }
}
Macbooks-MBP:ml-latest-small macbook$ 
#Search as you type
we send search request to search api (JQ), we will use multi match query to be able to search over multiple fields at same time,
why multimatch ?
remember for each declared search as you type field another three subfields are created so we need to search in more than one field, 
also we will use bool prefix type, becuase it can match search  towords any order and also assigns higher score towords the same order as query this is exactly what we need in an autocomplete scienarios .

Lets search for title field for the incomplete search query 'sta'

GET /autocomplete/_search?pretty --data-raw {
   "size": 5,
   "query": {
       "multi_match": {
           "query": "Sta",
           "type": "bool_prefix",
           "fields": [
               "title",
               "title._2gram",
               "title._3gram"
           ]
       }
   }
}

